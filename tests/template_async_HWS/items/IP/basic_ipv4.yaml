pmd@a1:
  agent: testpmd
  cmd: 'dpdk-testpmd -a pci0,dv_flow_en=2 -- -i --rxq=4 --txq=4'
  setup: [ "shell sysctl -w vm.nr_hugepages=4096" ]

scapy@b1:
  agent: scapy
  setup: [ 'shell ip link set up dev pf0']

config: &config
  command: |
    port stop 0
    flow configure 0 queues_number 4 queues_size 64
    port start 0
    start
    set verbose 1
  result: '(^Port 0:){1}'

#notice fragment_offset, length and packet_id is not supported in root table and ignored
fg0: &fg0
  command: |
    flow pattern_template 0 create ingress relaxed yes pattern_template_id 0 template eth / ipv4 src mask 192.168.1.1 dst mask 10.0.0.1 ttl mask 0xff tos mask 0xff proto mask 0xff packet_id mask 0xffff fragment_offset mask 0xf length mask 0xff version_ihl mask 0xff / end
    flow actions_template 0 create ingress actions_template_id 0 template queue  / end mask queue  / end
    flow template_table 0 create group 0 priority 0 ingress table_id 0 rules_number 1 pattern_template 0 actions_template 0
    flow queue 0 create 0 template_table 0 pattern_template 0 actions_template 0 postpone no pattern eth / ipv4 src spec 192.168.1.1 dst spec 10.0.0.1 ttl spec 64 tos spec 0x10 proto spec 17 packet_id spec 12345 fragment_offset spec 0 length spec 142 version_ihl spec 20 / end actions queue index 3 / end
    flow pull 0 queue 0
  result: {'and': ['Flow rule #0 creation enqueued', 'Queue #0 pulled 1 operations \(0 failed, 1 succeeded\)']}

# nh - Next Header: 17 for UDP
#len=None   # Total Length (None lets Scapy calculate it )
phase0: &phase0
  name: config
  pmd@a1: [ *config, *fg0 ]
  scapy@b1: |
    pkt_ok=Ether(src='22:00:00:00:00:22', dst='bb:00:00:00:00:bb')/IP(src="192.168.1.1", dst="10.0.0.1",ttl=64, tos=0x10, proto=17, id=12345, frag=0, len=None)/UDP(sport=1234, dport=5678)/Raw(b"X" * 100)
    pkt_nok=Ether(src='55:00:00:00:00:55', dst='bb:00:00:00:00:bb')/IP(src="192.168.1.2", dst="10.0.0.1",ttl=64, tos=0x10, proto=17, id=12345, frag=0, len=None)/UDP(sport=1, dport=1001)/Raw('==test==')

phase1: &phase1
  name: send and hit
  scapy@b1: |
    sendp(pkt_ok, iface=pf0, count=1, verbose=1)
    sendp(pkt_nok, iface=pf0, count=1, verbose=1)
  result:
    pmd@a1: '(port 0/queue 3: received 1 packets){1}'

flow:
  -
    phases: [ *phase0, *phase1 ]
    repeat: 1
