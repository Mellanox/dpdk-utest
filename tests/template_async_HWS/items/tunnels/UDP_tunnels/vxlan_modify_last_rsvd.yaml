# Example: Modify VXLAN last_rsvd field and forward to represented port

pmd@a1:
  agent: testpmd
  cmd: 'dpdk-testpmd -a pci0,dv_flow_en=2 -a pci1,dv_flow_en=2 -- -i --rxq=4 --txq=4'
  setup: ["shell sysctl -w vm.nr_hugepages=4096"]

scapy@b1:
  agent: scapy

scapy@b2:
  agent: scapy

config: &config
  command: |
    port stop all
    flow configure 0 queues_number 4 queues_size 64
    port start all
    start
    set verbose 1
  result: '(^Port 0:){1}'

# Group 0: Jump to group 1
pattern_template_jump: &pattern_template_jump
  command: |
    flow pattern_template 0 create ingress pattern_template_id 1 template eth / end
  result: 'Pattern template #1 created'

actions_template_jump: &actions_template_jump
  command: |
    flow actions_template 0 create ingress actions_template_id 1 template jump group 1 / end mask jump group 1 / end
  result: 'Actions template #1 created'

template_table_jump: &template_table_jump
  command: |
    flow template_table 0 create table_id 1 ingress group 0 priority 0 rules_number 128 pattern_template 1 actions_template 1
  result: 'Template table #1 created'

queue_and_rule_jump: &queue_and_rule_jump
  command: |
    flow queue 0 create 0 template_table 1 pattern_template 0 actions_template 0 postpone no pattern eth / end actions jump group 1 / end
    flow pull 0 queue 0
  result: {'and': ['Flow rule #0 creation enqueued', 'Queue #0 pulled 1 operations \(0 failed, 1 succeeded\)']}

# Group 1: Modify VXLAN last_rsvd
pattern_template_vxlan: &pattern_template_vxlan
  command: |
    flow pattern_template 0 create ingress pattern_template_id 2 template eth / ipv4 / udp / vxlan / end
  result: 'Pattern template #2 created'

actions_template_vxlan: &actions_template_vxlan
  command: |
    flow actions_template 0 create ingress actions_template_id 2 template modify_field op set dst_type vxlan_last_rsvd dst_offset 0 dst_level 0 src_type value src_value 0 width 8 / rss / end mask modify_field op set dst_type vxlan_last_rsvd dst_level 0xffffffff dst_offset 0xffffffff src_type value src_value 0 width 0xffffffff / rss / end
  result: 'Actions template #2 created'

template_table_vxlan: &template_table_vxlan
  command: |
    flow template_table 0 create table_id 2 ingress group 1 priority 0 rules_number 128 pattern_template 2 actions_template 2
  result: 'Template table #2 created'

queue_and_rule_vxlan: &queue_and_rule_vxlan
  command: |
    flow queue 0 create 0 template_table 2 pattern_template 0 actions_template 0 postpone no pattern eth / ipv4 / udp / vxlan / end actions modify_field op set dst_type vxlan_last_rsvd dst_offset 0 dst_level 0 src_type value src_value ff width 8 / rss / end
    flow pull 0 queue 0
  result: {'and': ['Flow rule #1 creation enqueued', 'Queue #0 pulled 1 operations \(0 failed, 1 succeeded\)']}


phase0: &phase0
  name: config
  pmd@a1: [ 
    *config, 
    *pattern_template_jump, *actions_template_jump, *template_table_jump, *queue_and_rule_jump,
    *pattern_template_vxlan, *actions_template_vxlan, *template_table_vxlan, *queue_and_rule_vxlan
  ]

phase1: &phase1
  name: traffic and verify
  scapy@b1: |
    from scapy.all import Ether, IP, UDP, VXLAN, sendp, AsyncSniffer, Raw
    # Build a VXLAN packet with last_rsvd=0
    pkt = Ether(src='00:11:22:33:44:55', dst='66:77:88:99:aa:bb') / \
          IP(src='192.0.2.1', dst='192.0.2.2') / \
          UDP(sport=1234, dport=4789) / \
          VXLAN(vni=1, flags = 0x08, reserved1=0, reserved2=0) / \
          Raw(b'VXLAN payload')
    pkt.show()
    sendp(pkt, iface=pf0, count=1, verbose=1)

flow:
  -
    phases: [ *phase0 ]
    repeat: 1
  -
    phases: [ *phase1 ]
    repeat: 1