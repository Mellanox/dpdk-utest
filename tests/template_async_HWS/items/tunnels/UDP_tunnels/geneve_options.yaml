#mlxcfg: FLEX_PARSER_PROFILE_ENABLE=0/8Â should be set.
# need to upgrade scapy to support geneve options
# sudo /usr/bin/python3 -m pip install --upgrade pip
# sudo pip3 install --upgrade scapy
pmd@a1:
    agent: testpmd
    cmd: 'dpdk-testpmd -a pci0,dv_flow_en=2 -a pci1,dv_flow_en=2 -- --mbcache=512 -i  --nb-cores=5  --rxq=6 --txq=6 --txd=1024 --rxd=1024  --burst=64'
    setup: [ "shell sysctl -w vm.nr_hugepages=1024" ]

scapy@b1:
  agent: scapy

config: &config
  command: |
    port stop 0
    flow configure 0 queues_number 4 queues_size 64 counters_number 4
    port start 0
    start
    set verbose 1
  result: ''

#Create a GENEVE option parser for port 0.
fg0: &fg0
  command: |
    mlx5 set tlv_option class 1 type 1 len 1 offset 0 sample_len 1 class_mode fixed data 0xffffffff
    mlx5 port 0 apply tlv_options
  result: 'GENEVE TLV options parser is successfully created'

#Create a flow that jumps from group 0 to 1.
fg1: &fg1
  command: |
    flow pattern_template 0 create ingress pattern_template_id 0 template eth / end
    flow actions_template 0 create ingress actions_template_id 0 template jump group 1 / end mask jump group 1 / end
    flow template_table 0 create table_id 0 group 0 priority 1 ingress rules_number 64 pattern_template 0 actions_template 0
    flow queue 0 create 0 template_table 0 pattern_template 0 actions_template 0 postpone no pattern eth / end actions jump group 1 / end
    flow pull 0 queue 0
  result: '1 succeeded'

#Create a template table with GENEVE option header.
#Create a flow match packets with specific GENEVE option data.
fg2: &fg2
  command: |
    flow pattern_template 0 create ingress pattern_template_id 1 template eth / ipv4 / udp / geneve / geneve-opt class spec 1 class mask 0xffff type spec 1 type mask 0xff length spec 1 data mask 0xffffffff / end
    flow actions_template 0 create ingress actions_template_id 1 template count / end mask count / end
    flow template_table 0 create table_id 1 group 1 priority 1 ingress rules_number 64 pattern_template 1 actions_template 1
    flow queue 0 create 0 template_table 1 pattern_template 0 actions_template 0 postpone no pattern eth / ipv4 / udp / geneve / geneve-opt class spec 1 type spec 1 length spec 1 data spec 0xdeadbeef / end actions count / end
    flow pull 0 queue 0
  result: '1 succeeded'

fg3: &fg3
  command: |
    flow query 0 1 count
  result: {'and': ['COUNT', 'hits: 1']}

phase0: &phase0
  name: config
  pmd@a1: [ *config, *fg0, *fg1, *fg2 ]
  scapy@b1: |
    load_contrib("geneve")
    from scapy.contrib.geneve import GENEVE, GeneveOptions
    p_ok=Ether()/IP()/UDP()/GENEVE(vni=0, optionlen=2)/GeneveOptions(classid=1, type=1, length=1, data=b'\xde\xad\xbe\xef')
    p_nok=Ether()/IP()/UDP()/GENEVE(vni=0, optionlen=2)/GeneveOptions(classid=1, type=1, length=1, data=b'\x6B\x27\xF9\xD6')

phase1: &phase1
  name: send and hit
  scapy@b1: |
    sendp(p_ok, iface=pf0, count=1, verbose=1)
    sendp(p_nok, iface=pf0, count=1, verbose=1)
  pmd@a1: [ *fg3 ]


flow:
  -
    phases: [ *phase0, *phase1 ]
    repeat: 1

