#
# Test:
#
# - matching on E-Switch Manager traffic
# - forwarding to E-Switch Manager
#
# Flow of packets
#
# - TG
# - DUT port 0
# - FDB rule in group 0, match all => jump to group 1
# - FDB rule in group 1, match uplink, dmac => PORT_REPRESENTOR(port=0xffff) action
# - NIC Rx rule in group 0, match all => jump to group 1
# - NIC Rx rule in group 1, match all => queue index 0
# - mac fwd in testpmd (00:00:00:aa:aa:aa => 00:00:00:bb:bb:bb)
#   - TODO: For some reason "inbound" filter failed to sniff any packets in scapy.
#     mac fwd is a workaround.
# - no NIC Tx rule
# - FDB rule in group 0, match all => jump to group 1
# - FDB rule in group 1, match E-Switch Manager (REPRESENTED_PORT, port=0xffff), dmac => fwd to uplink
#
# Assumes:
#
# - Full FDB access
# - All FDB control flow rules are disabled
# - Flow isolation
#

pmd@a1:
  agent: testpmd
  cmd: >
    dpdk-testpmd
    -a pci0,dv_flow_en=3,representor=pf0,fdb_def_rule_en=0,repr_matching_en=0
    --
    -i --flow-isolate-all
  setup:
    - "shell sysctl -w vm.nr_hugepages=1024"
    - "config-fdb --pci pci0 --vf 2"

scapy@b1:
  agent: scapy

configure_proxy_port: &configure_proxy_port
  command: |
    port stop all
    set promisc all off
    set allmulti all off
    flow configure 0 queues_number 4 queues_size 64
    port start all

configure_testpmd: &configure_testpmd
  command: |
    set eth-peer 0 00:00:00:bb:bb:bb
    set fwd mac
    set verbose 7

transfer_root_jump: &transfer_root_jump
  command: |
    flow pattern_template 0 create transfer relaxed yes pattern_template_id 1000 template end
    flow actions_template 0 create transfer actions_template_id 1000 template jump group 1 / end mask jump group 1 / end
    flow template_table 0 create group 0 priority 0 transfer table_id 1000 rules_number 1 pattern_template 1000 actions_template 1000
    flow queue 0 create 0 template_table 1000 pattern_template 0 actions_template 0 postpone yes pattern end actions jump / end
    flow push 0 queue 0
    flow pull 0 queue 0
  result: '(0 failed, 1 succeeded)'

transfer_nonroot_rules: &transfer_nonroot_rules
  command: |
    flow pattern_template 0 create transfer relaxed yes pattern_template_id 1001 template represented_port ethdev_port_id mask 0xffff / eth dst mask ff:ff:ff:ff:ff:ff / end

    # both actions templates are masked
    flow actions_template 0 create transfer actions_template_id 1001 template port_representor port_id 0xffff    / end mask port_representor port_id       0xffff / end
    flow actions_template 0 create transfer actions_template_id 1002 template represented_port ethdev_port_id 0  / end mask represented_port ethdev_port_id 0xffff / end

    flow template_table 0 create group 1 priority 0 transfer table_id 1001 rules_number 2048 pattern_template 1001 actions_template 1001 actions_template 1002

    # this rule matches uplink
    flow queue 0 create 0 template_table 1001 pattern_template 0 actions_template 0 postpone yes pattern represented_port ethdev_port_id spec 0      / eth dst spec 00:00:00:aa:aa:aa / end actions port_representor / end
    # this rule matches E-Switch Manager
    # take note that this uses MAC forwarding in testpmd
    flow queue 0 create 0 template_table 1001 pattern_template 0 actions_template 1 postpone yes pattern represented_port ethdev_port_id spec 0xffff / eth dst spec 00:00:00:bb:bb:bb / end actions represented_port / end
    flow push 0 queue 0
    flow pull 0 queue 0
  result: '(0 failed, 2 succeeded)'

ingress_rules: &ingress_rules
  command: |
    flow pattern_template 0 create ingress relaxed yes pattern_template_id 2000 template end
    flow actions_template 0 create ingress actions_template_id 2000 template jump group 1 / end mask jump group 0xffffffff / end
    flow template_table 0 create group 0 priority 0 ingress table_id 2000 rules_number 1 pattern_template 2000 actions_template 2000
    flow queue 0 create 0 template_table 2000 pattern_template 0 actions_template 0 postpone yes pattern end actions jump / end

    flow pattern_template 0 create ingress relaxed yes pattern_template_id 2001 template end
    flow actions_template 0 create ingress actions_template_id 2001 template queue index 0 / end mask queue index 0xffff / end
    flow template_table 0 create group 1 priority 0 ingress table_id 2001 rules_number 1 pattern_template 2001 actions_template 2001
    flow queue 0 create 0 template_table 2001 pattern_template 0 actions_template 0 postpone yes pattern end actions queue / end

    flow push 0 queue 0
    flow pull 0 queue 0
  result: '(0 failed, 2 succeeded)'

setup_ports: &setup_ports
  name: setup_ports
  pmd@a1:
  - *configure_proxy_port
  - *configure_testpmd

setup_flows: &setup_flows
  name: setup_flows
  pmd@a1:
  - *transfer_root_jump
  - *transfer_nonroot_rules
  - *ingress_rules

start_testpmd: &start_testpmd
  name: start_testpmd
  pmd@a1:
  - command: |
      start

scapy_sniff_send: &scapy_sniff_send
  name: scapy_sniff_send
  scapy@b1: |
    sniff = AsyncSniffer(iface=pf0, filter='ether dst 00:00:00:bb:bb:bb and udp and src port 1234')
    sniff.start()

    pkt = Ether(src='11:22:33:44:55:66', dst='00:00:00:aa:aa:aa')/IP(src='1.1.1.1', dst='2.2.2.2')/UDP(sport=1234, dport=5678)/Raw('x'*100)
    sendp(pkt, iface=pf0, count=1, verbose = False)
    time.sleep(2)
    captured = sniff.stop()
    print(f'packets = {len(captured)}')
  result:
    scapy@b1: 'packets = 1'

cleanup_flows: &cleanup_flows
  name: cleanup_flows
  pmd@a1: |
    stop

    flow queue 0 destroy 0 postpone yes rule 4 rule 3 rule 2 rule 1 rule 0
    flow push 0 queue 0
    flow pull 0 queue 0

flow:
- phases:
  - *setup_ports
  - *setup_flows
  - *start_testpmd
  - *scapy_sniff_send
  - *cleanup_flows
  repeat: 1
